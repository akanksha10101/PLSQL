üß© What Is a String?

                A string is a sequence of characters ‚Äî letters, digits, symbols, or even multilingual text (like Chinese, Â≠ó‰∏≤).
                In PL/SQL, strings can be:
                          Fixed-length ‚Üí CHAR(n) ‚Äì always padded to n characters.
                          Variable-length ‚Üí VARCHAR2(n) ‚Äì up to 32,767 chars in PL/SQL, no padding.
                          Large strings ‚Üí CLOB ‚Äì up to 128 TB.

‚úçÔ∏è Declaring String Variables

              You must declare a variable using one of Oracle‚Äôs string data types:

                              CHAR(n) / NCHAR(n) ‚Üí fixed length.
                              VARCHAR2(n) / NVARCHAR2(n) ‚Üí variable length.
                              CLOB / NCLOB ‚Üí large objects (no length specified).

                    Example:
                    DECLARE
                       l_company_name VARCHAR2(100);
                    If you omit the length:
                              l_company_name VARCHAR2; 
                              -- ‚ùå Error: PLS-00215 (must specify length)

‚öôÔ∏è Data Type Guidelines
                      Use Case	                               Recommended Type
                      Fixed-length                          data (e.g., ‚ÄòY/N‚Äô, SSN)	CHAR
                      Variable-length (most cases)               	VARCHAR2
                      Very large text (e.g., documents)           	CLOB
                      
                            Note: CHAR values are space-padded, which can affect equality comparisons.

üßÆ String Functions in PL/SQL
                1. Concatenation
                                  CONCAT('Hello', 'World')
                                  'Hello' || ' ' || 'World'

                2. Case Conversion
                                    UPPER('Oracle') ‚Üí ORACLE
                                    LOWER('Oracle') ‚Üí oracle
                                    INITCAP('oracle corp') ‚Üí Oracle Corp

                3. Substring Extraction
                                    SUBSTR('Oracle', 2, 3) ‚Üí rac
                                    SUBSTR('Oracle', -1, 1) ‚Üí e

                4. Find Position
                                    INSTR('steven feuerstein', 'e') ‚Üí 3
                                    INSTR('steven feuerstein', 'e', 6) ‚Üí 9
                
                5. Padding
                                    LPAD('Sub-header', 13, '.') ‚Üí ...Sub-header
                                    RPAD('abc', 20, '123') ‚Üí abc123123123...

                6. Replacement
                                    REPLACE('abc-a-b-c-abc','abc','123') ‚Üí 123-a-b-c-123
                                    TRANSLATE('abc-a-b-c-abc','abc','123') ‚Üí 123-1-2-3-123

                7. Trimming
                                    RTRIM('Hello...','.') ‚Üí Hello
                                    LTRIM('   Hi') ‚Üí Hi
                                    TRIM(BOTH '.' FROM '...Hi...') ‚Üí Hi

üö® Common Errors
                  1. String Too Long
                  
                                  If assigned string exceeds declared length:
                                  
                                        DECLARE
                                          l_name VARCHAR2(3);
                                        BEGIN
                                          l_name := 'Steven'; -- ‚ùå ORA-06502: value error
                                        END;

                  2. Column Too Small
                                        INSERT INTO table(col VARCHAR2(2)) VALUES ('abc');
                                        -- ‚ùå ORA-12899: value too large for column
                  
‚öñÔ∏è Key Size Limits
          Data Type	             Max in PL/SQL         	Max in SQL
          VARCHAR2              	32,767 bytes	        4,000 bytes
          CHAR                   	32,767 bytes	        2,000 bytes
          CLOB                  	128 TB              	(4 GB - 1) * DB_BLOCK_SIZE

üß† Pro Tips
          
          Use VARCHAR2 for almost everything unless you need CHAR or CLOB.
          Be cautious comparing CHAR and VARCHAR2 ‚Äî trailing spaces matter.
          Handle overflow errors (VALUE_ERROR) gracefully with exception blocks.
          When saving long strings to a table, ensure your column data type can hold the entire value (use CLOB if necessary).

